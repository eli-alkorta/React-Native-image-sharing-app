{"version":3,"sources":["App.js","assets/logo.jpg","web-build/register-service-worker.js"],"names":["App","React","useState","selectedImage","setSelectedImage","style","styles","container","source","uri","localUri","thumbnail","instructions","onPress","a","async","Sharing","alert","remoteUri","button","buttonText","logo","ImagePicker","granted","pickerResult","cancelled","Platform","OS","uploadToAnonymousFilesAsync","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","width","height","marginBottom","marginTop","color","fontSize","marginHorizontal","padding","borderRadius","resizeMode","module","exports","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console"],"mappings":"mQAQe,SAASA,IAAO,IAAD,EACcC,IAAMC,SAAS,MAD7B,WACrBC,EADqB,KACNC,EADM,KAiC5B,OAAsB,OAAlBD,EAEA,kBAAC,IAAD,CAAME,MAAOC,EAAOC,WAClB,kBAAC,IAAD,CACEC,OAAQ,CAAEC,IAAKN,EAAcO,UAC7BL,MAAOC,EAAOK,YAEf,kBAAC,IAAD,CAAMN,MAAOC,EAAOM,cAApB,6DACA,kBAAC,IAAD,CAAkBC,QAjBE,oBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACbE,OADa,wCAEvBC,MAAM,0CAA0Cd,EAAce,WAFvC,0BAMzBF,IAAmBb,EAAcO,UANR,6DAiB6BL,MAAOC,EAAOa,QAC9D,kBAAC,IAAD,CAAMd,MAAOC,EAAOc,YAApB,wBAOJ,kBAAC,IAAD,CAAMf,MAAOC,EAAOC,WAClB,kBAAC,IAAD,CAAOC,OAAQa,IAAMhB,MAAOC,EAAOe,OACjC,kBAAC,IAAD,CAAMhB,MAAOC,EAAOM,cAApB,6DACF,kBAAC,IAAD,CAAkBC,QAjDG,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACIQ,OADJ,WAGQ,IAHR,OAGJC,QAHI,uBAIvBN,MAAM,iDAJiB,4CAAAH,EAAA,MAQAQ,OARA,WASM,KAD3BE,EARqB,QASRC,UATQ,sDAaL,QAAhBC,IAASC,GAbY,oCAAAb,EAAA,MAcDc,YAA4BJ,EAAaf,MAdxC,QAcnBS,EAdmB,OAevBd,EAAiB,CAAEM,SAAUc,EAAaf,IAAKS,cAfxB,wBAiBvBd,EAAiB,CAAEM,SAAUc,EAAaf,IAAKS,UAAW,OAjBnC,8DAiD4Bb,MAAOC,EAAOa,QAC7D,kBAAC,IAAD,CAAMd,MAAOC,EAAOc,YAApB,qBAOV,IAAMd,EAASuB,IAAWC,OAAO,CAC/BvB,UAAW,CACTwB,KAAM,EACNC,gBAAiB,OACjBC,WAAY,SACZC,eAAgB,UAElBb,KAAM,CACJc,MAAO,IACPC,OAAQ,IACRC,aAAc,IAEhBzB,aAAc,CACZ0B,UAAW,GACXC,MAAO,OACPC,SAAU,GACVC,iBAAkB,IAEpBtB,OAAQ,CACNmB,UAAW,GACXN,gBAAiB,OACjBU,QAAS,GACTC,aAAc,GAEhBvB,WAAY,CACVoB,SAAU,GACVD,MAAO,QAET5B,UAAW,CACTwB,MAAO,IACPC,OAAQ,IACRQ,WAAY,c,mBCnGhBC,EAAOC,QAAU,IAA0B,kC,4DCEvC,kBAAmBC,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cACPC,SAAS,yDAA0D,CAAEC,MAAO,qCAC5EC,MAAK,SAAUC,OAGfC,OAAM,SAAUC,GACfC,QAAQH,KAAK,oCAAqCE,W","file":"static/js/app.6bf45d16.chunk.js","sourcesContent":["import React from 'react';\nimport { Platform, Image, StyleSheet, Text, View, TouchableOpacity} from 'react-native';\nimport logo from './assets/logo.jpg'; \nimport * as ImagePicker from 'expo-image-picker';\nimport * as Sharing from 'expo-sharing'; \nimport uploadToAnonymousFilesAsync from 'anonymous-files'; \n\n\nexport default function App() {\n  const [selectedImage, setSelectedImage] = React.useState(null);\n\n  let openImagePickerAsync = async () => {\n    let permissionResult = await ImagePicker.requestCameraRollPermissionsAsync();\n\n    if (permissionResult.granted === false) {\n      alert('Permission to access camera roll is required!');\n      return;\n    }\n\n    let pickerResult = await ImagePicker.launchImageLibraryAsync();\n    if (pickerResult.cancelled === true) {\n      return;\n    }\n\n    if (Platform.OS === 'web') {\n      let remoteUri = await uploadToAnonymousFilesAsync(pickerResult.uri);\n      setSelectedImage({ localUri: pickerResult.uri, remoteUri });\n    } else {\n      setSelectedImage({ localUri: pickerResult.uri, remoteUri: null });\n    } \n  };\n\n  let openShareDialogAsync = async () => {\n    if (!(await Sharing.isAvailableAsync())) {\n      alert(`The image is available for sharing at: ${selectedImage.remoteUri}`);\n      return;\n    }\n\n    Sharing.shareAsync(selectedImage.localUri);\n  }; \n\n  if (selectedImage !== null) {\n    return (\n      <View style={styles.container}>\n        <Image\n          source={{ uri: selectedImage.localUri }}\n          style={styles.thumbnail}\n        />\n         <Text style={styles.instructions} >Para compartir una foto con tus amigos, pulsa el botón</Text>\n         <TouchableOpacity onPress={openShareDialogAsync} style={styles.button}>\n          <Text style={styles.buttonText}>Comparte esta foto</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n\n    return (\n      <View style={styles.container}>\n        <Image source={logo} style={styles.logo}/>\n          <Text style={styles.instructions} >Para compartir una foto con tus amigos, pulsa el botón</Text>\n        <TouchableOpacity onPress={openImagePickerAsync} style={styles.button}>\n          <Text style={styles.buttonText}>Escoge una foto</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  logo: {\n    width: 305,\n    height: 159,\n    marginBottom: 10,\n  },\n  instructions: {\n    marginTop: 10,\n    color: '#888',\n    fontSize: 18,\n    marginHorizontal: 15,\n  }, \n  button: {\n    marginTop: 20,\n    backgroundColor: \"gray\",\n    padding: 20,\n    borderRadius: 5,\n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff',\n  }, \n  thumbnail: {\n    width: 300,\n    height: 300,\n    resizeMode: \"contain\"\n  }\n});\n","module.exports = __webpack_public_path__ + \"static/media/logo.8f116e5f.jpg\";","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/React-Native-image-sharing-app/expo-service-worker.js', { scope: '/React-Native-image-sharing-app/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}